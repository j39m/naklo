#!/usr/bin/env python3

# pyaklon shamefacedly comes crawling back to Python.
# It was fun writing naklo in Perl, but it grew difficult
# to maintain. Therefore...

from pyaFiles import controlFile, titleFile, listingFile
import argparse
import sys

MY_NAME = "pyaklon"


class pyaklon(object):

    def __init__(self, *args):
        self._prep_args(*args)

    def _prep_args(self, *args):
        ap = argparse.ArgumentParser()
        ap.add_argument("-l", "--listing",
                        help="name of listing file (typically "
                        "a shell redirect)",)
        ap.add_argument("-t", "--titles",
                        help="name of titles file",)
        ap.add_argument("-c", "--control",
                        help="name of control file",)
        args = ap.parse_args()

        compulsory = (args.listing
                      and args.titles
                      and args.control)
        if not compulsory:
            ap.print_help()
            errstr = ("\nHint: you probably want to provide all three "
                      "arguments. The listing file is typically a shell "
                      "redirect, like `<(ls ./*.flac)'.")
            self.pyaErr(errstr, 1)
        return 0

    def pyaErr(self, msg, bailcode=None):
        sys.stderr.write("%s\n" % msg)
        if bailcode is not None:
            sys.exit(bailcode)

    def main(self):
        return 0


if __name__ == "__main__":
    runner = pyaklon(*sys.argv[1:])
    sys.exit(runner.main())
