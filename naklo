#!/usr/bin/python3
import sys

import argparse
import yaml

import libnaklo3.songs
from libnaklo3.controls import NakloController


def get_args():
    parser = argparse.ArgumentParser(
        description="tags files."
    )
    parser.add_argument(
        "-c", "--control-file", action="append",
        help="File of YAML-formatted control blocks",
    )
    parser.add_argument(
        "-p", "--preserve-existing", action="store_true",
        help="Preserve existing tags within input files",
    )
    parser.add_argument(
        "songs", nargs=argparse.REMAINDER, metavar="<targets ...>"
    )

    args = parser.parse_args()

    if not args.songs:
        parser.error("No songs to tag.")
    return args


def get_tag_blocks(pathname):
    with open(pathname, "r") as tbfp:
        return yaml.safe_load(tbfp.read())


def add_control_files(controller, args):
    """Mutates a |controller| with tag blocks specified in |args|."""
    for pathname in args.control_file:
        tag_blocks = get_tag_blocks(pathname)
        controller.add_tag_blocks(tag_blocks)


def main():
    args = get_args()

    songs = libnaklo3.songs.songs_from(args.songs)
    controller = NakloController(songs)

    add_control_files(controller, args)
    if not args.preserve_existing:
        controller.clear()

    controller.apply_tags()
    controller.enact()
    return 0

if __name__ == "__main__":
    sys.exit(main())
